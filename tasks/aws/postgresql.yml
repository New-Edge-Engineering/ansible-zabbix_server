---
- name: aws postgresql | check if zabbix exists as database role in AWS RDS instance
  become: yes
  become_user: postgres
  shell: "psql --command='\\dg' --host={{ zabbix_server_db_host|mandatory }} | grep -c zabbix"
  register: zabbix_database_roles
  ignore_errors: true
  tags:
    - zabbix
    - configuration
    - user
    - database

- name: aws postgresql | create zabbix database role in AWS RDS instance
  become: yes
  become_user: postgres
  shell: "psql --command=\"create role zabbix with password '{{ zabbix_server_db_pass|mandatory }}' login;\" --host={{ zabbix_server_db_host|mandatory }}"
  when: zabbix_database_roles.stdout|int == 0
  tags:
    - zabbix
    - configuration
    - user
    - database

- name: aws postgresql | create database in AWS RDS instance
  become: yes
  become_user: postgres
  postgresql_db:
    login_host: "{{ zabbix_server_db_host|mandatory }}"
    login_password: "{{ zabbix_server_db_master_password|mandatory }}"
    login_user: "{{ zabbix_server_db_master_user|mandatory }}"
    name: "{{zabbix_server_db_name}}"
    owner: "{{zabbix_server_db_user}}"
    encoding: UTF-8
    lc_collate: en_US.UTF-8
    lc_ctype: en_US.UTF-8
    template: template0
  register: zabbix_database_result
  tags:
    - zabbix
    - setup
    - database

- name: aws postgresql | set fact
  set_fact:
    zabbix_database: "{{ zabbix_database_result|changed }}"

- name: aws postgresql | stop local postgresql server
  service:
    name: postgresql
    state: stopped
  notify:
    - restart zabbix_server_or_proxy
  tags:
    - zabbix
    - database
